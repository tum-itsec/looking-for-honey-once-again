import sys
import socket
import binascii
import argparse

from SMB_structs import *
from SMB_diff import *

PACKET = "00000035ff534d4272ab0000007543c80001f0debc9a78563412adde0000adde00000000001200024572726f720002534d4220322e30303200"
PACKETS = ["00000035ff534d4272ab0000001843c80001f0debc9a7856341200000000000000000000001200024572726f720002534d4220322e30303200", "0000009cff534d4273ab0000001843c8000000000000000000000000efbe0000000000000cfffa0000ffff02000100afbaedda4a00edceaffa54c000806100604806062b0601050502a03e303ca00e300c060a2b06010401823702020aa22a04284e544c4d53535000010000001582086200000000280000000000000028000000060100000000000f0055006e00690078000000530061006d00620061000000"]

RESPONSES = {
    "Samba ~4.10.0": "000000cafe534d4240000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000100020200006e6f766f7369626972736b0000000000010000000000010000000100000001005a2ce6591917d501000000000000000080004a0000000000604806062b0601050502a03e303ca00e300c060a2b06010401823702020aa32a3028a0261b246e6f745f646566696e65645f696e5f5246433431373840706c656173655f69676e6f7265",
    "Samba ~3.5.6": "00000025ff534d4272000000008003c00000000000000000000000000000adde0000000001ffff0000",
    "Windows 10": "000001c0fe534d424000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004100010002020000b7c299b29c2ddb4192b2dc1f2a5120c0010000000000010000000100000001006d64ef998517d501000000000000000080004001000000006082013c06062b0601050502a08201303082012ca01a3018060a2b06010401823702021e060a2b06010401823702020aa282010c048201084e45474f4558545301000000000000006000000070000000fb721ca12ea682839d1d1446c7751ae246d59538931e8291b6c12d872a106f8b346c9d977ee5be9c129345e34e78c11c0000000000000000600000000100000000000000000000005c33530deaf90d4db2ec4ae3786ec3084e45474f4558545303000000010000004000000098000000fb721ca12ea682839d1d1446c7751ae25c33530deaf90d4db2ec4ae3786ec30840000000580000003056a05430523027802530233121301f06035504031318546f6b656e205369676e696e67205075626c6963204b65793027802530233121301f06035504031318546f6b656e205369676e696e67205075626c6963204b6579",
    "Windows 7": "000000aafe534d4240000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000100020200001e008714af8f0f40801767e8cd4d095501000000000001000000010000000100e0d921a9d52dd501683254fed42dd50180002a0000000000602806062b0601050502a01e301ca01a3018060a2b06010401823702021e060a2b06010401823702020a",
    "Windows XP": "00000025ff534d427200000000f543c80001f0debc9a78563412adde0000adde0000000001ffff0000",
    "HoneySMB/SMBPot": "0000009efe534d42400000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410001000202000041414141414141414141414141414141000000000000010000000100000001000035dd7b531ad5010035dd7b531ad50180001e0000000000601c06062b0601050502a0123010a00e300c060a2b06010401823702020a",
    "Dionaea": "00000055ff534d4272000000009843c8000000000000000000000000ffffadde000000001102000301000100001000000000010000000000fde30080e7db081b2e19d501c4ff0010000bff6538547e6c42a43e12d211971644",
    "YNQ": "000000cafe534d42400000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410001000202000067c6697351ff4aec29cdbaabf2fbe34600000000a000010050000100300001000014e84473e6d601c0d301142fe5d60180004a0000000000604806062b0601050502a03e303ca00e300c060a2b06010401823702020aa32a3028a0261b246e6f745f646566696e65645f696e5f5246433431373840706c656173655f69676e6f7265"
}

MULTI_RESPONSES = {
    "Samba ~4.10.0": ["000000cafe534d4240000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041000100020200006e6f766f7369626972736b000000000001000000000001000000010000000100aaa943c36144d501000000000000000080004a0000000000604806062b0601050502a03e303ca00e300c060a2b06010401823702020aa32a3028a0261b246e6f745f646566696e65645f696e5f5246433431373840706c656173655f69676e6f7265", "0"],
    "Samba ~3.5.6": ["00000025ff534d4272000000008803c0000000000000000000000000000000000000000001ffff0000", "00000023ff534d427301000500880380000000000000000000000000efbe000000000000000000"],
    "Windows 10": ["000001c0fe534d42400000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410001000202000033d22eb41b24f14499d622051bd63150010000000000010000000100000001008b6eca21f343d501000000000000000080004001000000006082013c06062b0601050502a08201303082012ca01a3018060a2b06010401823702021e060a2b06010401823702020aa282010c048201084e45474f45585453010000000000000060000000700000001278c6e9bb5e8fd4181770f12e002e7ed3db791d68760d84e27b2df3ca125a88c16feab1abce57a934d048c26e9482650000000000000000600000000100000000000000000000005c33530deaf90d4db2ec4ae3786ec3084e45474f45585453030000000100000040000000980000001278c6e9bb5e8fd4181770f12e002e7e5c33530deaf90d4db2ec4ae3786ec30840000000580000003056a05430523027802530233121301f06035504031318546f6b656e205369676e696e67205075626c6963204b65793027802530233121301f06035504031318546f6b656e205369676e696e67205075626c6963204b6579", "2"],
    "Windows 7": ["000000aafe534d424000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004100010002020000a655ad865845ea4babcbeb44ad464a270100000000000100000001000000010070f5d5be5544d501463f41a85344d50180002a0000000000602806062b0601050502a01e301ca01a3018060a2b06010401823702021e060a2b06010401823702020a", "0"],
    "Windows XP": ["00000025ff534d4272000000009843c80001f0debc9a785634120000000000000000000001ffff0000", "1"],
    "impacketv1": ["00000025ff534d4272000000008000000000000000000000000000000000000000000000000200ffff", "00000116ff534d4273160000c08001c8000000000000000000000000efbe00000a00000004ff0000000000c700eb00a181c43081c1a0030a0101a10c060a2b06010401823702020aa281ab0481a84e544c4d5353500002000000100010003800000005028a62414141414141414100000000000000006000600048000000ffffffffffffffff6f00590055005600740050004d0068000100100061007000630061006800580078004900020010006f00590055005600740050004d0068000300100061007000630061006800580078004900040010006f00590055005600740050004d006800070008000095a323f167d501000000006400470044006a006b006c004800770000006400470044006a006b006c00480077000000"],
    "impacketv2": ["0000009efe534d424000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004100010002020000414141414141414141414141414141410000000000000100000001000000010000cd3f40f167d50100cd3f40f167d50180001e0000000000601c06062b0601050502a0123010a00e300c060a2b06010401823702020a", "00000116ff534d4273160000c08001c8000000000000000000000000efbe00000a00000004ff0000000000c700eb00a181c43081c1a0030a0101a10c060a2b06010401823702020aa281ab0481a84e544c4d5353500002000000100010003800000005028a62414141414141414100000000000000006000600048000000ffffffffffffffff4200720071005a0076006e00640076000100100052004a0079006f004d00570046007000020010004200720071005a0076006e00640076000300100052004a0079006f004d00570046007000040010004200720071005a0076006e00640076000700080000cd3f40f167d5010000000047004300510076006d006a004d006d00000047004300510076006d006a004d006d000000"],
    "Dionaea": ["00000055ff534d4272000000009843c8000000000000000000000000ffff0000000000001102000301000100001000000000010000000000fde30080e1a5e3dc6844d501c4ff0010000bff6538547e6c42a43e12d211971644", "000000feff534d4273160000c09843c8000000000000000000000000ffff00000000000004ff00000000005300d300a151304fa0030a0101a10c060a2b06010401823702020aa23a04384e544c4d5353500002000000000000003000000015820862a4dfe80bf5c61e3a000000000000000000000000300000000501280a0000000f570069006e0064006f0077007300200037002000500072006f00660065007300730069006f006e0061006c00200037003600300030000000570069006e0064006f0077007300200037002000500072006f00660065007300730069006f006e0061006c00200036002e003100000057004f0052004b00470052004f0055005000"],
    "YNQ": ["000000cafe534d42400000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410001000202000067c6697351ff4aec29cdbaabf2fbe34600000000a000010050000100300001000014e84473e6d601c0d301142fe5d60180004a0000000000604806062b0601050502a03e303ca00e300c060a2b06010401823702020aa32a3028a0261b246e6f745f646566696e65645f696e5f5246433431373840706c656173655f69676e6f7265", "00000023ff534d42730d0000c09801c0000000000000000000000000efbe000000000000000000"]
}

def extract_nativeos(responses, all=False, lm=True):
    data_pack2 = unpack_response(responses[1])
    hint = ""

    if not isinstance(data_pack2, int):
        data_pack2 = data_pack2[1]
        if not isinstance(data_pack2[2][0], Exception):
            try:
                try:
                    os_data = data_pack2[2][8]
                    lm_data = data_pack2[2][9]
                    native_os = deinterlace_zeroes(os_data)
                    native_lm = deinterlace_zeroes(lm_data)
                except:
                    return hint
                if all and native_os:
                    hint = native_os
                elif "Darwin" in native_os:
                    hint = "Darwin"
                elif "NDM Keenetic" in native_os:
                    hint = "NDM Keenetic"
                elif "Java" in native_os:
                    hint = "Java"
                elif "EPSON Storage Server" in native_os:
                    hint = "EPSON Storage Server"

                if lm:
                    lm_strings = ["Windows", "Samba", "Likewise", "NQ", "Alfresco CIFS", "SXLM", "SunOS", "Triplus LAN Manager", "smbx", "HP X9000 CIFS"]
                    for st in lm_strings:
                        if st in native_lm:
                            if hint:
                                hint += " / " + st
                            else:
                                hint = st
            except IndexError:
                pass
    
    return hint

def classify(responses, multi_mode):
    simils = []
    hint = ""

    if multi_mode:
        if len(PACKETS) > len(responses):
            return None, ""
        for key in MULTI_RESPONSES.keys(): # calculate similarity to every implemetation
            simil_av = 0
            stats = SMBDiff()
            for tup in zip(responses, MULTI_RESPONSES[key]):
                simil = compare_responses(stats, unpack_response(tup[0]), unpack_response(int(tup[1]) if len(tup[1]) == 1 else binascii.unhexlify(tup[1])))
                if simil == 0:
                    simil_av = 0
                    break
                simil_av += simil
            simil_av /= len(responses) # calculate average over all responses of this single implementation
            simils.append((key, simil_av, stats, responses))

            hint = extract_nativeos(responses)
    else:
        for key in RESPONSES.keys():
            stats = SMBDiff()
            simils.append((key, compare_responses(stats, unpack_response(responses[0]), unpack_response(binascii.unhexlify(RESPONSES[key]))), stats, responses[0]))

    return sorted(simils, key=lambda x: x[1], reverse=True), hint


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("ip")
    parser.add_argument("-p", "--port", default=445)
    parser.add_argument("-o", "--outfile")
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("-vv", "--very-verbose", action="store_true", dest="very_verbose")
    parser.add_argument("--torify", dest="torify", action="store_true")
    parser.add_argument("--single-mode", dest="single_mode", action="store_true")
    parser.add_argument("--file-mode", dest="file_mode", action="store_true")
    args = parser.parse_args()

    if args.file_mode:
        with open(args.ip) as f:
            if args.single_mode:
                response = f.read()
                responses = [response if len(response) == 1 else binascii.unhexlify(response)]
            else:
                responses = json.loads(f.read())
                responses = [response if len(response) == 1 else binascii.unhexlify(response) for response in responses]
        if args.single_mode:
            simils, hint = classify([response], False)
        else:
            simils, hint = classify(responses, True)
    else:
        if args.torify:
            import socks

            socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050) 
            socket.socket = socks.socksocket

        sock = socket.socket()

        if not args.torify:
            sock.settimeout(3)

        sock.connect((args.ip, int(args.port)))

        if args.single_mode:
            sock.send(binascii.unhexlify(PACKET))

            try:
                response = sock.recv(1024)
            except (socket.timeout, TimeoutError, ConnectionResetError, ConnectionRefusedError) as e:
                print(e)
                sys.exit(1)

            if response == b"":
                print("Conection closed by remote host.")
                sys.exit(1)

            responses = [response]
            simils, hint = classify(responses, False)
        else:
            responses = []

            for el in PACKETS:
                sock.send(binascii.unhexlify(el))

                try:
                    response = sock.recv(1024)
                    if response == b"":
                        responses.append("0")
                    else:
                        responses.append(response)
                except (socket.timeout, ConnectionResetError, ConnectionRefusedError) as e:
                    responses.append(error_codes[str(type(e))])

            simils, hint = classify(responses, True)

    if simils is None:
        print("{}: Premature session exit.".format(args.ip))

        if args.very_verbose:
            for el in responses:
                print_response(el)
    else:
        print("{}: {}: {:.2f}%{}".format(args.ip, simils[0][0], (simils[0][1] * 100), "" if not hint else " ({})".format(hint)))

        if args.verbose or args.very_verbose:
            print("\nFull table:", file=sys.stderr)
            for el in simils:
                caption = "{}: {:.2f}%".format(el[0], (el[1] * 100))
                print(caption, file=sys.stderr)
                if args.very_verbose:
                    print("-" * len(caption), file=sys.stderr)
                    print_stats(el[2], outfile=sys.stderr)
                    print("", file=sys.stderr)
                    print("", file=sys.stderr)
            if args.very_verbose:
                print("Full Response", file=sys.stderr)
                if args.single_mode:
                    print_response(simils[0][3], outfile=sys.stderr)
                else:
                    for resp in simils[0][3]:
                        print_response(resp, outfile=sys.stderr)

        if not args.outfile:
            args.outfile = args.ip.replace(".","_") + "_" + str(args.port) + "_dump.hex"

        if not args.file_mode:
            with open(args.outfile, "w") as f:
                if args.single_mode:
                    f.write(binascii.hexlify(simils[0][3]).decode("ascii"))
                else:
                    f.write(json.dumps([el if len(el) == 1 else binascii.hexlify(el).decode("ascii") for el in simils[0][3]]))